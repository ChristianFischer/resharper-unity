using System;
using System.Collections;
using System.Collections.Generic;
using Unity.Burst;
using Unity.Collections;
using Unity.Jobs;
using Unity.Jobs.LowLevel.Unsafe;
using UnityEngine;

namespace UnityEngine
{
    public class Debug
    {
        public static void Log(object message)
        {
        }
    }
}
namespace Unity
{
    namespace Jobs
    {
        [JobProducerType]
        public interface IJob
        {
            void Execute();
        }

        namespace LowLevel
        {
            namespace Unsafe
            {
                public class JobProducerTypeAttribute : Attribute
                {
                }
            }
        }
    }

    namespace Burst
    {
        public class BurstCompileAttribute : Attribute
        {
        }

        public class BurstDiscardAttribute : Attribute
        {
        }

    }
    
    namespace Collections
    {
        public struct NativeArray<T> : IDisposable, IEnumerable<T>, IEnumerable, IEquatable<NativeArray<T>>
            where T : struct
        {
            public void Dispose()
            {
                throw new NotImplementedException();
            }

            public IEnumerator<T> GetEnumerator()
            {
                throw new NotImplementedException();
            }

            IEnumerator IEnumerable.GetEnumerator()
            {
                return GetEnumerator();
            }

            public bool Equals(NativeArray<T> other)
            {
                throw new NotImplementedException();
            }
        }
    }
}


namespace ExceptionsTests
{
    public class ExceptionsTests 
    {
        [BurstCompile]
        struct ExceptionsTest1 : IJob
        {
            |public void Execute()
            {
                NoWarnings();
                ContainsWarning();
            }|(0)

            |private void NoWarnings()
            {
                throw new ArgumentException(new object().ToString());
                throw new ArgumentException("exception");
            }|(1)

            |private void ContainsWarning()
            {
                |new ArgumentException(nameof(ContainsWarning))|(3);
            }|(2)
        }

        [BurstCompile]
        struct ExceptionsTest2 : IJob
        {
            |public void Execute()
            {
                |try|(5)
                {
                }
                catch (Exception e)
                {
                }
                finally
                {
                }
            }|(4)
        }

        [BurstCompile]
        struct ExceptionsTest3 : IJob
        {
            |public void Execute()
            {
                |try|(7)
                {
                }
                finally
                {
                }
            }|(6)
        }

        [BurstCompile]
        struct ExceptionsTest4 : IJob
        {
            |public void Execute()
            {
                |try|(9)
                {
                }
                catch (ArgumentException e) 
                {
                }
                catch (NullReferenceException e)
                {
                }
                finally
                {
                }
            }|(8)
        }

        [BurstCompile]
        struct ExceptionsTest5 : IJob
        {
            |public void Execute()
            {
                |foreach|(11) (var i in new NativeArray<int>())
                {
                    Debug.Log(|i|(12));
                }
            }|(10)
        }
    }
}
---------------------------------------------------------
(0): ReSharper Unity Burst Code Line Marker: Burst compiled code
(1): ReSharper Unity Burst Code Line Marker: Burst compiled code
(2): ReSharper Unity Burst Code Line Marker: Burst compiled code
(3): ReSharper Warning: Burst: Creating a managed type 'ArgumentException' is not supported
(4): ReSharper Unity Burst Code Line Marker: Burst compiled code
(5): ReSharper Warning: Burst: Try statement is not supported
(6): ReSharper Unity Burst Code Line Marker: Burst compiled code
(7): ReSharper Warning: Burst: Try statement is not supported
(8): ReSharper Unity Burst Code Line Marker: Burst compiled code
(9): ReSharper Warning: Burst: Try statement is not supported
(10): ReSharper Unity Burst Code Line Marker: Burst compiled code
(11): ReSharper Warning: Burst: The 'foreach' construction is not supported
(12): ReSharper Warning: Burst: Debug logging functions accepts only strings
