def modelSrcDir = new File(repoRoot, "rider/protocol/src/main/kotlin/model")
def hashBaseDir = new File(repoRoot, "rider/build/rdgen")

// TODO: Think about adding an msbuild task for rdgen

task generateFrontendBackendModel(type: tasks.getByName('rdgen').class) {
    // Make sure to store separately generated models in separate folders, or the hash generation includes both
    def backendCsOutDir = new File(repoRoot, "resharper/resharper-unity/src/Rider/RdUnityProtocol")
    def frontendKtOutDir = new File(repoRoot, "rider/src/main/kotlin/com/jetbrains/rider/protocol/RdUnityProtocol")

    // NOTE: classpath is evaluated lazily, at execution time, because it comes from the unzipped
    // intellij SDK, which is extracted in afterEvaluate
    params {
        verbose = true
        classpath { backend.getRiderModelJar() }
        sources "$modelSrcDir/frontendBackend"
        hashFolder = "$hashBaseDir/frontendBackend"
        packages = "model.frontendBackend"

        generator {
            language = "kotlin"
            transform = "asis"
            root = "com.jetbrains.rider.model.nova.ide.IdeRoot"
            directory = "$frontendKtOutDir"
        }

        generator {
            language = "csharp"
            transform = "reversed"
            root = "com.jetbrains.rider.model.nova.ide.IdeRoot"
            directory = "$backendCsOutDir"
        }
    }
}

task generateBackendUnityModel(type: tasks.getByName('rdgen').class) {
    // Make sure to store separately generated models in separate folders, or the hash generation includes both
    def backendCsOutDir = new File(repoRoot, "resharper/resharper-unity/src/Rider/RdEditorProtocol")
    def unityEditorCsOutDir = new File(repoRoot, "unity/EditorPlugin/NonUnity/RdEditorProtocol")
    def ktOutput = new File(repoRoot, "rider/src/main/kotlin/com/jetbrains/rider/protocol/RdEditorProtocol")

    params {
        verbose = true
        classpath { backend.getRiderModelJar() }
        sources "$modelSrcDir/backendUnity"
        hashFolder = "$hashBaseDir/backendUnity"
        packages = "model.backendUnity"

        generator {
            language = "csharp"
            transform = "asis"
            namespace = "JetBrains.Platform.Unity.EditorPluginModel"
            root = "model.backendUnity.BackendUnityModel"
            directory = "$backendCsOutDir"
        }

        generator {
            language = "csharp"
            transform = "reversed"
            namespace = "JetBrains.Platform.Unity.EditorPluginModel"
            root = "model.backendUnity.BackendUnityModel"
            directory = "$unityEditorCsOutDir"
        }

        // TODO: Delete me. This is created to reuse types for the backend/unity model on the frontend
        generator {
            language = "kotlin"
            transform = "asis"
            namespace = "com.jetbrains.rider.plugins.unity.editorPlugin.model"
            root = "model.backendUnity.BackendUnityModel"
            directory = "$ktOutput"
        }
    }
}

task generateModels {
    group = 'protocol'
    description = 'Generates protocol models.'
    dependsOn generateFrontendBackendModel, generateBackendUnityModel
}

jar.dependsOn generateModels
// Make sure the dotnet build tasks depend on model, too
