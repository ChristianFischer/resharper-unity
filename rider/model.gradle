def modelSrcDir = new File(repoRoot, "rider/protocol/src/main/kotlin/model")
def hashBaseDir = new File(repoRoot, "rider/build/rdgen")

// TODO: Introduce the JetBrains.RdGen package and build C# from msbuild?
// Pros: Generated files are stored in obj folder + automatically included
//       Gradle only configures Kotlin generated code
// Cons: Two places to configure input
//       Runs rdgen twice for input - once to generate Kt, again to generate C# (possibly multiple times for each project?)

task generateLibModel(type: tasks.getByName('rdgen').class) {
    // Always store models in their own folder, so the hash is only looking at the files we generate
    // Note that the generated backend and Unity editor lib models are the same. We could share this somehow? Or move to msbuild?
    def backendCsOutDir = new File(repoRoot, "resharper/build/generated/Model/Lib")
    def unityEditorCsOutDir = new File(repoRoot, "unity/build/generated/Model/Lib")
    def frontendKtOutDir = new File(repoRoot, "rider/src/main/gen/kotlin/com/jetbrains/rider/plugins/unity/model/lib")

    params {
        verbose = project.gradle.startParameter.logLevel == LogLevel.INFO || project.gradle.startParameter.logLevel == LogLevel.DEBUG
        classpath { backend.getRiderModelJar() }
        sources "$modelSrcDir/lib"
        hashFolder = "$hashBaseDir/lib"
        packages = "model.lib"

        generator {
            language = "csharp"
            transform = "asis"
            root = "model.lib.Library"
            directory = "$backendCsOutDir"
        }

        generator {
            language = "csharp"
            transform = "asis"
            root = "model.lib.Library"
            directory = "$unityEditorCsOutDir"
        }

        generator {
            language = "kotlin"
            transform = "asis"
            root = "model.lib.Library"
            directory = "$frontendKtOutDir"
        }
    }
}

task generateFrontendBackendModel(type: tasks.getByName('rdgen').class) {
    dependsOn generateLibModel

    // Always store models in their own folder, so the hash is only looking at the files we generate
    def backendCsOutDir = new File(repoRoot, "resharper/build/generated/Model/FrontendBackend")
    def frontendKtOutDir = new File(repoRoot, "rider/src/main/gen/kotlin/com/jetbrains/rider/plugins/unity/model/frontendBackend")

    // NOTE: classpath is evaluated lazily, at execution time, because it comes from the unzipped
    // intellij SDK, which is extracted in afterEvaluate
    params {
        verbose = project.gradle.startParameter.logLevel == LogLevel.INFO || project.gradle.startParameter.logLevel == LogLevel.DEBUG
        classpath { backend.getRiderModelJar() }
        sources "$modelSrcDir"
        hashFolder = "$hashBaseDir/frontendBackend"
        packages = "model.frontendBackend"

        generator {
            language = "kotlin"
            transform = "asis"
            root = "com.jetbrains.rider.model.nova.ide.IdeRoot"
            directory = "$frontendKtOutDir"
        }

        generator {
            language = "csharp"
            transform = "reversed"
            root = "com.jetbrains.rider.model.nova.ide.IdeRoot"
            directory = "$backendCsOutDir"
        }
    }
}

task generateBackendUnityModel(type: tasks.getByName('rdgen').class) {
    dependsOn generateLibModel

    // Always store models in their own folder, so the hash is only looking at the files we generate
    def backendCsOutDir = new File(repoRoot, "resharper/build/generated/Model/BackendUnity")
    def unityEditorCsOutDir = new File(repoRoot, "unity/build/generated/Model/BackendUnity")

    params {
        verbose = project.gradle.startParameter.logLevel == LogLevel.INFO || project.gradle.startParameter.logLevel == LogLevel.DEBUG
        classpath { backend.getRiderModelJar() }
        sources "$modelSrcDir"
        hashFolder = "$hashBaseDir/backendUnity"
        packages = "model.backendUnity"

        generator {
            language = "csharp"
            transform = "asis"
            root = "model.backendUnity.BackendUnityModel"
            directory = "$backendCsOutDir"
        }

        generator {
            language = "csharp"
            transform = "reversed"
            root = "model.backendUnity.BackendUnityModel"
            directory = "$unityEditorCsOutDir"
        }
    }
}

task generateModels {
    group = 'protocol'
    description = 'Generates protocol models.'
    dependsOn generateFrontendBackendModel, generateBackendUnityModel
}

jar.dependsOn generateModels
// Make sure the dotnet build tasks depend on model, too
